Index: loginapp/tests.py
===================================================================
diff --git a/loginapp/tests.py b/loginapp/tests.py
deleted file mode 100644
--- a/loginapp/tests.py	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
+++ /dev/null	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
@@ -1,3 +0,0 @@
-from django.test import TestCase
-
-# Create your tests here.
Index: loginapp/views.py
===================================================================
diff --git a/loginapp/views.py b/loginapp/views.py
deleted file mode 100644
--- a/loginapp/views.py	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
+++ /dev/null	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
@@ -1,3 +0,0 @@
-from django.shortcuts import render
-
-# Create your views here.
Index: loginapp/models.py
===================================================================
diff --git a/loginapp/models.py b/loginapp/models.py
deleted file mode 100644
--- a/loginapp/models.py	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
+++ /dev/null	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
@@ -1,3 +0,0 @@
-from django.db import models
-
-# Create your models here.
Index: loginapp/admin.py
===================================================================
diff --git a/loginapp/admin.py b/loginapp/admin.py
deleted file mode 100644
--- a/loginapp/admin.py	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
+++ /dev/null	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
@@ -1,3 +0,0 @@
-from django.contrib import admin
-
-# Register your models here.
Index: loginapp/apps.py
===================================================================
diff --git a/loginapp/apps.py b/loginapp/apps.py
deleted file mode 100644
--- a/loginapp/apps.py	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
+++ /dev/null	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
@@ -1,5 +0,0 @@
-from django.apps import AppConfig
-
-
-class LoginappConfig(AppConfig):
-    name = 'loginapp'
Index: templates/create_post_form.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/create_post_form.html b/templates/create_post_form.html
new file mode 100755
--- /dev/null	(date 1620310920000)
+++ b/templates/create_post_form.html	(date 1620310920000)
@@ -0,0 +1,18 @@
+{% load widget_tweaks %}
+
+<form action="" method="POST">
+    {% csrf_token %}
+    <input type="hidden" name="channel_id" value="{{ channel_id }}">
+    <h1>post</h1>
+    <label> post name:
+        {{ post_form.post_title }}
+    </label>
+    <br>
+    <label> post content:
+        {{ post_form.post_content }}
+    </label>
+    <br>
+    <h3>{{ textmassage }}</h3>
+    <button type="submit" class="btn btn-info"> CREATE</button>
+    <button type="reset" class="btn btn-info"> RESET</button>
+</form>
Index: templates/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/index.html b/templates/index.html
new file mode 100755
--- /dev/null	(date 1620315930941)
+++ b/templates/index.html	(date 1620315930941)
@@ -0,0 +1,27 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <title> Index </title>
+</head>
+<body>
+
+{% include 'topbar.html' %}
+<p>
+    {{ testString }}
+</p>
+{% for channel in channel_list %}
+    <ol>
+        <ul>
+            <a href='/channel/{{ channel.channel_name }}/{{ channel.channel_id }}/'>
+                {{ channel.channel_name }}
+            </a>
+        </ul>
+    </ol>
+{% endfor %}
+
+{#<div><a href="/createChannel/">Create Channel</a></div>#}
+
+
+</body>
+</html>
\ No newline at end of file
Index: templates/post.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/post.html b/templates/post.html
new file mode 100755
--- /dev/null	(date 1620224288000)
+++ b/templates/post.html	(date 1620224288000)
@@ -0,0 +1,24 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <title> post</title>
+</head>
+<body>
+<div>
+    {{ channel.channel_id }}
+</div>
+{% for post in post_list %}
+    <ol>
+        <ul>
+            <a href='/post/{{ post.post_title }}/'>
+                {{ post.post_title }}
+            </a>
+        </ul>
+    </ol>
+{% endfor %}
+
+<div><a href="/createPost/{{ channel.channel_id }}/">Create Post</a></div>
+
+</body>
+</html>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectModuleManager\">\n    <modules>\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/Forum.iml\" filepath=\"$PROJECT_DIR$/.idea/Forum.iml\" />\n    </modules>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
--- a/.idea/modules.xml	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
+++ b/.idea/modules.xml	(date 1620390042645)
@@ -2,7 +2,7 @@
 <project version="4">
   <component name="ProjectModuleManager">
     <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/Forum.iml" filepath="$PROJECT_DIR$/.idea/Forum.iml" />
+      <module fileurl="file://$PROJECT_DIR$/.idea/forum.iml" filepath="$PROJECT_DIR$/.idea/forum.iml" />
     </modules>
   </component>
 </project>
\ No newline at end of file
Index: Forum/wsgi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nWSGI config for Forum project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Forum.settings')\n\napplication = get_wsgi_application()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Forum/wsgi.py b/Forum/wsgi.py
--- a/Forum/wsgi.py	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
+++ b/Forum/wsgi.py	(date 1620140610000)
@@ -1,16 +1,16 @@
 """
-WSGI config for Forum project.
+WSGI config for forum project.
 
 It exposes the WSGI callable as a module-level variable named ``application``.
 
 For more information on this file, see
-https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
+https://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/
 """
 
 import os
 
 from django.core.wsgi import get_wsgi_application
 
-os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Forum.settings')
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'forum.settings')
 
 application = get_wsgi_application()
Index: Forum/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"Forum URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/3.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Forum/urls.py b/Forum/urls.py
--- a/Forum/urls.py	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
+++ b/Forum/urls.py	(date 1620312532000)
@@ -1,21 +1,18 @@
-"""Forum URL Configuration
-
-The `urlpatterns` list routes URLs to views. For more information please see:
-    https://docs.djangoproject.com/en/3.1/topics/http/urls/
-Examples:
-Function views
-    1. Add an import:  from my_app import views
-    2. Add a URL to urlpatterns:  path('', views.home, name='home')
-Class-based views
-    1. Add an import:  from other_app.views import Home
-    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
-Including another URLconf
-    1. Import the include() function: from django.urls import include, path
-    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
-"""
 from django.contrib import admin
 from django.urls import path
+from app import views
 
 urlpatterns = [
     path('admin/', admin.site.urls),
+    # channel
+    path('', views.list_channel),
+    # path('createChannel/', views.create_channel),
+    # post
+    path('channel/<str:channel_name>/<str:channel_id>/', views.list_post),
+    path('createPost/<str:channel_id>/', views.create_post),
+    # post details
+    path('post/<str:post_id>/', views.view_post),
+    path('post/delete/<str:post_id>/<str:channel_id>/<str:channel_name>/', views.delete_post),
+    path('post/edit/<str:post_id>/', views.edit_post),
+    path('comment/create/', views.create_comment),
 ]
Index: Forum/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nDjango settings for Forum project.\n\nGenerated by 'django-admin startproject' using Django 3.1.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/3.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/3.1/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '8-vxmwm%pm+9a3em^(2p$80s(5rzr@9(22r#1^jk27_j&j$lff'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'Forum.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates']\n        ,\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'Forum.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Forum/settings.py b/Forum/settings.py
--- a/Forum/settings.py	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
+++ b/Forum/settings.py	(date 1620183788000)
@@ -1,33 +1,31 @@
 """
-Django settings for Forum project.
+Django settings for forum project.
 
-Generated by 'django-admin startproject' using Django 3.1.7.
+Generated by 'django-admin startproject' using Django 3.2.
 
 For more information on this file, see
-https://docs.djangoproject.com/en/3.1/topics/settings/
+https://docs.djangoproject.com/en/3.2/topics/settings/
 
 For the full list of settings and their values, see
-https://docs.djangoproject.com/en/3.1/ref/settings/
+https://docs.djangoproject.com/en/3.2/ref/settings/
 """
-
+import os
 from pathlib import Path
 
 # Build paths inside the project like this: BASE_DIR / 'subdir'.
 BASE_DIR = Path(__file__).resolve().parent.parent
 
-
 # Quick-start development settings - unsuitable for production
-# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/
+# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/
 
 # SECURITY WARNING: keep the secret key used in production secret!
-SECRET_KEY = '8-vxmwm%pm+9a3em^(2p$80s(5rzr@9(22r#1^jk27_j&j$lff'
+SECRET_KEY = 'django-insecure-*y5(d*uj!xqjkj&)q9+g8nik+hgb^!1j6g_e_d)_m1j5^87(&6'
 
 # SECURITY WARNING: don't run with debug turned on in production!
 DEBUG = True
 
 ALLOWED_HOSTS = []
 
-
 # Application definition
 
 INSTALLED_APPS = [
@@ -37,6 +35,8 @@
     'django.contrib.sessions',
     'django.contrib.messages',
     'django.contrib.staticfiles',
+    'widget_tweaks',
+    'app'
 ]
 
 MIDDLEWARE = [
@@ -49,7 +49,7 @@
     'django.middleware.clickjacking.XFrameOptionsMiddleware',
 ]
 
-ROOT_URLCONF = 'Forum.urls'
+ROOT_URLCONF = 'forum.urls'
 
 TEMPLATES = [
     {
@@ -68,11 +68,10 @@
     },
 ]
 
-WSGI_APPLICATION = 'Forum.wsgi.application'
-
+WSGI_APPLICATION = 'forum.wsgi.application'
 
 # Database
-# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
+# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
 
 DATABASES = {
     'default': {
@@ -81,9 +80,8 @@
     }
 }
 
-
 # Password validation
-# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators
+# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
 
 AUTH_PASSWORD_VALIDATORS = [
     {
@@ -100,9 +98,8 @@
     },
 ]
 
-
 # Internationalization
-# https://docs.djangoproject.com/en/3.1/topics/i18n/
+# https://docs.djangoproject.com/en/3.2/topics/i18n/
 
 LANGUAGE_CODE = 'en-us'
 
@@ -114,8 +111,13 @@
 
 USE_TZ = True
 
-
 # Static files (CSS, JavaScript, Images)
-# https://docs.djangoproject.com/en/3.1/howto/static-files/
+# https://docs.djangoproject.com/en/3.2/howto/static-files/
 
 STATIC_URL = '/static/'
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
+STATICFILES_DIRS = [os.path.join(BASE_DIR), 'static']
Index: Forum/asgi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nASGI config for Forum project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/3.1/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Forum.settings')\n\napplication = get_asgi_application()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Forum/asgi.py b/Forum/asgi.py
--- a/Forum/asgi.py	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
+++ b/Forum/asgi.py	(date 1620140610000)
@@ -1,16 +1,16 @@
 """
-ASGI config for Forum project.
+ASGI config for forum project.
 
 It exposes the ASGI callable as a module-level variable named ``application``.
 
 For more information on this file, see
-https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/
+https://docs.djangoproject.com/en/3.2/howto/deployment/asgi/
 """
 
 import os
 
 from django.core.asgi import get_asgi_application
 
-os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Forum.settings')
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'forum.settings')
 
 application = get_asgi_application()
Index: manage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Forum.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/manage.py b/manage.py
--- a/manage.py	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
+++ b/manage.py	(date 1620140610000)
@@ -6,7 +6,7 @@
 
 def main():
     """Run administrative tasks."""
-    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Forum.settings')
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'forum.settings')
     try:
         from django.core.management import execute_from_command_line
     except ImportError as exc:
Index: app/migrations/0004_auto_20210505_1510.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/migrations/0004_auto_20210505_1510.py b/app/migrations/0004_auto_20210505_1510.py
new file mode 100755
--- /dev/null	(date 1620227428000)
+++ b/app/migrations/0004_auto_20210505_1510.py	(date 1620227428000)
@@ -0,0 +1,39 @@
+# Generated by Django 3.2 on 2021-05-05 15:10
+
+from django.db import migrations, models
+import uuid
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('app', '0003_auto_20210505_1510'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='channel',
+            name='status',
+            field=models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive')], default=1),
+        ),
+        migrations.AlterField(
+            model_name='comment',
+            name='comment_id',
+            field=models.UUIDField(default=uuid.UUID('9cffe6e6-3b19-4fa0-849f-8a20c0fe7cec'), editable=False, primary_key=True, serialize=False),
+        ),
+        migrations.AlterField(
+            model_name='comment',
+            name='status',
+            field=models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive')], default=1),
+        ),
+        migrations.AlterField(
+            model_name='post',
+            name='post_id',
+            field=models.UUIDField(default=uuid.UUID('6989f128-bcf3-40b6-a8f7-57eb0a4a0ef2'), editable=False, primary_key=True, serialize=False),
+        ),
+        migrations.AlterField(
+            model_name='post',
+            name='status',
+            field=models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive')], default=1),
+        ),
+    ]
Index: app/migrations/0001_initial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/migrations/0001_initial.py b/app/migrations/0001_initial.py
new file mode 100755
--- /dev/null	(date 1620227424000)
+++ b/app/migrations/0001_initial.py	(date 1620227424000)
@@ -0,0 +1,65 @@
+# Generated by Django 3.2 on 2021-05-05 15:10
+
+from django.conf import settings
+from django.db import migrations, models
+import django.db.models.deletion
+import uuid
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ('auth', '0012_alter_user_first_name_max_length'),
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Channel',
+            fields=[
+                ('channel_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
+                ('channel_name', models.CharField(max_length=30, unique=True)),
+                ('channel_priority', models.IntegerField(default=50)),
+                ('status', models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive')], default=1)),
+                ('created_at', models.DateTimeField(auto_now_add=True)),
+                ('modified_at', models.DateTimeField(auto_now=True)),
+                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Post',
+            fields=[
+                ('post_id', models.UUIDField(default=uuid.UUID('e2bba23d-8ebe-41d7-a89d-de56ff022eee'), editable=False, primary_key=True, serialize=False)),
+                ('post_title', models.CharField(max_length=30)),
+                ('post_priority', models.IntegerField(default=50)),
+                ('post_content', models.TextField()),
+                ('status', models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive')], default=1)),
+                ('created_at', models.DateTimeField(auto_now_add=True)),
+                ('modified_at', models.DateTimeField(auto_now=True)),
+                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.channel')),
+                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Comment',
+            fields=[
+                ('comment_id', models.UUIDField(default=uuid.UUID('1950b77e-00d0-471c-88a7-295caed5c4f5'), editable=False, primary_key=True, serialize=False)),
+                ('comment', models.TextField()),
+                ('status', models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive')], default=1)),
+                ('created_at', models.DateTimeField(auto_now_add=True)),
+                ('modified_at', models.DateTimeField(auto_now=True)),
+                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
+                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.post')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ChannelAdminGroup',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('admin_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
+                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.channel')),
+            ],
+        ),
+    ]
Index: app/migrations/0002_auto_20210505_1510.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/migrations/0002_auto_20210505_1510.py b/app/migrations/0002_auto_20210505_1510.py
new file mode 100755
--- /dev/null	(date 1620227426000)
+++ b/app/migrations/0002_auto_20210505_1510.py	(date 1620227426000)
@@ -0,0 +1,24 @@
+# Generated by Django 3.2 on 2021-05-05 15:10
+
+from django.db import migrations, models
+import uuid
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('app', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='comment',
+            name='comment_id',
+            field=models.UUIDField(default=uuid.UUID('adc0dc83-8ffc-4819-b428-89795601df64'), editable=False, primary_key=True, serialize=False),
+        ),
+        migrations.AlterField(
+            model_name='post',
+            name='post_id',
+            field=models.UUIDField(default=uuid.UUID('e7c39a9a-1a73-48de-851d-ec0aecaeef3d'), editable=False, primary_key=True, serialize=False),
+        ),
+    ]
Index: static/style.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/static/style.css b/static/style.css
new file mode 100644
--- /dev/null	(date 1620315441953)
+++ b/static/style.css	(date 1620315441953)
@@ -0,0 +1,281 @@
+#titleDiv {
+    display: flex;
+    justify-content: space-around;
+}
+
+#title {
+    width: 1000px;
+}
+
+/*room*/
+#room_container {
+    display: flex;
+    flex-direction: row;
+    justify-content: center;
+    flex-wrap: wrap;
+    margin-bottom: 50px;
+}
+
+#room1,
+#room2,
+#room3,
+#room4,
+#room5,
+#room6 {
+    display: flex;
+    flex-direction: row;
+    justify-content: space-evenly;
+    width: 400px;
+    height: 140px;
+    border: 3px dashed #393838;
+    text-align: center;
+    margin: 1vw;
+}
+
+.icon_img {
+    width: 100px;
+    height: 100px;
+    align-self: center;
+}
+
+h2 {
+    font-size: 40pt;
+    align-self: center;
+}
+
+#room1:hover #live {
+    content: url("images/home.gif");
+}
+
+#room2:hover #book {
+    content: url("images/book.gif");
+}
+
+#room3:hover #art {
+    content: url("images/think.gif");
+}
+
+#room4:hover #talk {
+    content: url("images/talk.gif");
+}
+
+#room5:hover #news {
+    content: url("images/news.gif");
+}
+
+#room1:hover,
+#room2:hover,
+#room3:hover,
+#room4:hover,
+#room5:hover,
+#room6:hover {
+    background-color: rgba(255, 255, 255, 0.5);
+}
+
+/*when screen size changes*/
+@media only screen and (max-width: 1100px) {
+    #title {
+        width: 90vw;
+    }
+}
+
+@media only screen and (max-width: 1500px) {
+
+    #room1,
+    #room2,
+    #room3,
+    #room4,
+    #room5,
+    #room6 {
+        flex-direction: column;
+        justify-content: center;
+        width: 350px;
+        height: auto;
+        padding-bottom: 30px;
+    }
+
+    .icon_img {
+        width: 150px;
+        height: 150px;
+    }
+}
+
+@media only screen and (max-width: 800px) {
+
+    #room1,
+    #room2,
+    #room3,
+    #room4,
+    #room5,
+    #room6 {
+        flex-direction: column;
+        width: 600px;
+        height: auto;
+        padding-bottom: 30px;
+        margin-bottom: 2vw;
+    }
+}
+
+@media only screen and (max-width: 700px) {
+
+    #room1,
+    #room2,
+    #room3,
+    #room4,
+    #room5,
+    #room6 {
+        flex-direction: column;
+        width: 85vw;
+        height: auto;
+        padding-bottom: 30px;
+        margin-bottom: 2vw;
+    }
+}
+
+html, body {
+    background: url(images/pattern_background_brown.png);
+    width: 100%;
+    height: 100%;
+    background-size: cover;
+    margin: 0;
+    padding: 0;
+    font-family: "Parchment";
+    color: #393838;
+}
+
+.container {
+    display: flex;
+    flex-direction: column;
+}
+
+
+/*top bar, nav bar*/
+.bar {
+    display: flex;
+    flex-direction: row;
+    height: 62.1px;
+}
+
+#menu_icon {
+    width: 50px;
+    height: 50px;
+    align-self: center;
+    margin-left: 0.7vw;
+}
+
+#loginDiv {
+    order: 2;
+}
+
+#login {
+    width: 129.4px;
+    height: 62.1px;
+}
+
+#loginbtnDiv {
+    display: flex;
+    flex-direction: row-reverse;
+}
+
+#loginbox {
+    display: flex;
+    flex-direction: row;
+    justify-content: space-between;
+    width: 350px;
+    height: 0px;
+    transition: height 800ms;
+    border-radius: 20px;
+    visibility: hidden;
+    border: dotted 5px #393838;
+    padding-left: 10px;
+    padding-right: 5px;
+    background-color: rgba(255, 248, 220, 0.8);
+    overflow: hidden;
+}
+
+.closebox {
+    height: 0;
+}
+
+span {
+    font-size: 40pt;
+}
+
+#login:hover {
+    content: url("images/login_button_hover.png");
+}
+
+#signup {
+    width: 129.4px;
+    height: 62.1px;
+    order: 1;
+}
+
+#signup:hover {
+    content: url("images/signup_button_hover.png");
+}
+
+#imgButtonDiv {
+    display: flex;
+    flex-direction: row-reverse;
+    position: absolute;
+    right: 0%;
+}
+
+#ok_button {
+    width: 60px;
+    height: 110px;
+    border: 0px solid transparent;
+    border-radius: 10px;
+    margin-left: 2px;
+    background-color: rgba(255, 255, 255, 0.8);
+    font-family: "Parchment";
+    font-size: 35pt;
+    color: grey;
+    align-self: center;
+    text-align: center;
+}
+
+#ok_button:hover {
+    background-color: rgba(34, 139, 34, 0.6);
+    color: rgba(255, 255, 255, 1);
+    text-shadow: 2px 2px 10px rgba(255, 255, 255, 1);
+    box-shadow: 4px 4px 20px rgba(255, 248, 220, 0.8);
+}
+
+#search {
+    width: 40px;
+    height: 40px;
+    align-self: center;
+    margin-left: 0.5vw;
+}
+
+#searchbar {
+    width: 0px;
+    max-width: 300px;
+    transition: width 1200ms;
+    height: 45px;
+    opacity: 0.3;
+    border: 0vw solid transparent;
+    padding-left: 0.5vw;
+    margin-left: 0.5vw;
+    align-self: center;
+    visibility: hidden;
+}
+
+#search:hover {
+    content: url("images/search_icon_hover.png");
+}
+
+/*input box border*/
+.input {
+    border-radius: 20px;
+}
+
+.input2 {
+    height: 30px;
+}
+
+
+/* screen change */
+
Index: app/migrations/0007_auto_20210506_2229.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/migrations/0007_auto_20210506_2229.py b/app/migrations/0007_auto_20210506_2229.py
new file mode 100755
--- /dev/null	(date 1620311348000)
+++ b/app/migrations/0007_auto_20210506_2229.py	(date 1620311348000)
@@ -0,0 +1,44 @@
+# Generated by Django 3.2.2 on 2021-05-06 14:29
+
+from django.db import migrations, models
+import uuid
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('app', '0006_auto_20210506_2135'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='channel',
+            name='channel_id',
+            field=models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
+        ),
+        migrations.AlterField(
+            model_name='channel',
+            name='status',
+            field=models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive')], default=1),
+        ),
+        migrations.AlterField(
+            model_name='comment',
+            name='comment_id',
+            field=models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
+        ),
+        migrations.AlterField(
+            model_name='comment',
+            name='status',
+            field=models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive')], default=1),
+        ),
+        migrations.AlterField(
+            model_name='post',
+            name='post_id',
+            field=models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
+        ),
+        migrations.AlterField(
+            model_name='post',
+            name='status',
+            field=models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive')], default=1),
+        ),
+    ]
Index: static/script.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/static/script.js b/static/script.js
new file mode 100644
--- /dev/null	(date 1620315504391)
+++ b/static/script.js	(date 1620315504391)
@@ -0,0 +1,126 @@
+/*check screen size*/
+/*var checkWidth = window.matchMedia("(max-width: 300px)");
+$(document).ready(function () {
+    checkWidth.addEventListener(searchClick);
+});*/
+
+/*close all opening function*/
+var bgClick = 0;
+var bgClick2 = 0;
+function backOriginal() {
+    if (bgClick == 1) {
+        if (searching == 0) {
+            document.getElementById("searchbar").style.width = "0px";
+            setTimeout(() => {
+                document.getElementById("search").src = "images/search_icon.png";
+                document.getElementById("searchbar").style.visibility = "hidden";
+                searchClick = 1;
+                bgClick = 0;
+            }, 1000);
+        }
+    }
+
+    if (bgClick2 == 1) {
+        if (loggingin == 0) {
+            document.getElementById("loginbox").style.height = "0px";
+            setTimeout(() => {
+                document.getElementById("login").src = "images/login_button.png";
+                document.getElementById("loginbox").style.visibility = "hidden";
+                loginClick = 1;
+                bgClick2 = 0;
+            }, 700);
+        }
+    }
+}
+
+
+/*search bar*/
+var searchClick = 1;
+function searchOnClick() {
+    if (searchClick == 1) {
+        var image = document.getElementById("search");
+        image.src = "images/search_icon_hover.png";
+        document.getElementById("searchbar").style.width = "30vw";
+        /*if (checkWidth.matches) {
+            document.getElementById("searchbar").style.width = "20vw";
+        }
+        else {
+            document.getElementById("searchbar").style.width = "30vw";
+        }*/
+        document.getElementById("searchbar").style.visibility = "visible";
+        searchClick = 0;
+        setTimeout(() => {
+            bgClick = 1;
+        }, 500);
+
+        /*close loginbox if loginbox is opening*/
+        if (document.getElementById("loginbox").style.height != 0) {
+            document.getElementById("login").src = "images/login_button.png";
+            document.getElementById("loginbox").style.height = "0px";
+            setTimeout(() => {
+                document.getElementById("loginbox").style.visibility = "hidden";
+                loginClick = 1;
+                bgClick2 = 0;
+            }, 700);
+        }
+    }
+    else {
+        document.getElementById("searchbar").style.width = "0px";
+        setTimeout(() => {
+            document.getElementById("search").src = "images/search_icon.png";
+            document.getElementById("searchbar").style.visibility = "hidden";
+            searchClick = 1;
+            bgClick = 0;
+        }, 1000);
+    }
+}
+
+var searching = 0;
+function alertSearch() {
+    searching = 1;
+    setTimeout(() => {
+        searching = 0;
+    }, 1000);
+}
+
+/*login button*/
+var loginClick = 1;
+function loginOnClick() {
+    if (loginClick == 1) {
+        document.getElementById("login").src = "images/login_button_hover.png";
+        document.getElementById("loginbox").style.height = "125px";
+        document.getElementById("loginbox").style.visibility = "visible";
+        loginClick = 0;
+        setTimeout(() => {
+            bgClick2 = 1;
+        }, 500);
+
+        /*close search bar if search bar is opening*/
+        if (document.getElementById("searchbar").style.width == "30vw") {
+            document.getElementById("searchbar").style.width = "0px";
+            setTimeout(() => {
+                document.getElementById("search").src = "images/search_icon.png";
+                document.getElementById("searchbar").style.visibility = "hidden";
+                searchClick = 1;
+                bgClick = 0;
+            }, 1000);
+        }
+    }
+    else {
+        document.getElementById("login").src = "images/login_button.png";
+        document.getElementById("loginbox").style.height = "0px";
+        setTimeout(() => {
+            document.getElementById("loginbox").style.visibility = "hidden";
+            loginClick = 1;
+            bgClick2 = 0;
+        }, 700);
+    }
+}
+
+var loggingin = 0;
+function alertLogin() {
+    loggingin = 1;
+    setTimeout(() => {
+        loggingin = 0;
+    }, 1000);
+}
\ No newline at end of file
Index: app/migrations/0006_auto_20210506_2135.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/migrations/0006_auto_20210506_2135.py b/app/migrations/0006_auto_20210506_2135.py
new file mode 100755
--- /dev/null	(date 1620308108000)
+++ b/app/migrations/0006_auto_20210506_2135.py	(date 1620308108000)
@@ -0,0 +1,39 @@
+# Generated by Django 3.2.2 on 2021-05-06 13:35
+
+from django.db import migrations, models
+import uuid
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('app', '0005_auto_20210505_1510'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='channel',
+            name='status',
+            field=models.SmallIntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1),
+        ),
+        migrations.AlterField(
+            model_name='comment',
+            name='comment_id',
+            field=models.UUIDField(default=uuid.UUID('37f00b92-27a0-4ca6-926d-136bdb841b45'), editable=False, primary_key=True, serialize=False),
+        ),
+        migrations.AlterField(
+            model_name='comment',
+            name='status',
+            field=models.SmallIntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1),
+        ),
+        migrations.AlterField(
+            model_name='post',
+            name='post_id',
+            field=models.UUIDField(default=uuid.UUID('be59e35d-7072-4df5-91ff-546c2f5f91c2'), editable=False, primary_key=True, serialize=False),
+        ),
+        migrations.AlterField(
+            model_name='post',
+            name='status',
+            field=models.SmallIntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1),
+        ),
+    ]
Index: app/migrations/0005_auto_20210505_1510.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/migrations/0005_auto_20210505_1510.py b/app/migrations/0005_auto_20210505_1510.py
new file mode 100755
--- /dev/null	(date 1620227428000)
+++ b/app/migrations/0005_auto_20210505_1510.py	(date 1620227428000)
@@ -0,0 +1,24 @@
+# Generated by Django 3.2 on 2021-05-05 15:10
+
+from django.db import migrations, models
+import uuid
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('app', '0004_auto_20210505_1510'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='comment',
+            name='comment_id',
+            field=models.UUIDField(default=uuid.UUID('e2a8dc51-a1c2-4f45-8833-e74683a47562'), editable=False, primary_key=True, serialize=False),
+        ),
+        migrations.AlterField(
+            model_name='post',
+            name='post_id',
+            field=models.UUIDField(default=uuid.UUID('7a81e7fb-7c87-447e-b25b-0e54a2cf81c9'), editable=False, primary_key=True, serialize=False),
+        ),
+    ]
Index: app/migrations/0003_auto_20210505_1510.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/migrations/0003_auto_20210505_1510.py b/app/migrations/0003_auto_20210505_1510.py
new file mode 100755
--- /dev/null	(date 1620227426000)
+++ b/app/migrations/0003_auto_20210505_1510.py	(date 1620227426000)
@@ -0,0 +1,39 @@
+# Generated by Django 3.2 on 2021-05-05 15:10
+
+from django.db import migrations, models
+import uuid
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('app', '0002_auto_20210505_1510'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='channel',
+            name='status',
+            field=models.SmallIntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1),
+        ),
+        migrations.AlterField(
+            model_name='comment',
+            name='comment_id',
+            field=models.UUIDField(default=uuid.UUID('9cca4056-7889-4a59-b414-00c480f99a18'), editable=False, primary_key=True, serialize=False),
+        ),
+        migrations.AlterField(
+            model_name='comment',
+            name='status',
+            field=models.SmallIntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1),
+        ),
+        migrations.AlterField(
+            model_name='post',
+            name='post_id',
+            field=models.UUIDField(default=uuid.UUID('f9d3d626-3c23-41c2-95cd-817d8150ef8c'), editable=False, primary_key=True, serialize=False),
+        ),
+        migrations.AlterField(
+            model_name='post',
+            name='status',
+            field=models.SmallIntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1),
+        ),
+    ]
Index: app/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/views.py b/app/views.py
new file mode 100755
--- /dev/null	(date 1620313052000)
+++ b/app/views.py	(date 1620313052000)
@@ -0,0 +1,107 @@
+from django.contrib.auth.models import User
+from django.shortcuts import render, redirect
+from django.urls import reverse
+from django.views.generic import ListView, CreateView
+from django.http import HttpResponseRedirect
+# Create your views here.
+from app.models import Channel, Post, Comment
+from app import forms
+
+
+# channel
+def list_channel(request):
+    if request.method == 'GET':
+        channel_list = Channel.objects.all().order_by('-channel_priority')
+        return render(request, 'index.html', locals())
+
+
+# def create_channel(request):
+#     if request.method == "POST":
+#         print('create channel result', request.POST)
+#         channel_form = forms.ChannelForm(request.POST)
+#         if channel_form.is_valid():
+#             name = channel_form.cleaned_data['channel_name']
+#             author = channel_form.cleaned_data['created_by']
+#             user = User.objects.get(username=author)
+#             channel = Channel.objects.create(channel_name=name, created_by=user)
+#             textmassage = 'saved'
+#             return redirect('/')
+#         else:
+#             textmassage = 'saved'
+#
+#     if request.method == "GET":
+#         channel_form = forms.ChannelForm()
+#         return render(request, "create_channel_form.html", locals())
+
+
+# post
+def list_post(request, channel_name, channel_id):
+    if request.method == 'GET':
+        channel = Channel.objects.get(channel_id=channel_id)
+        post_list = Post.objects.filter(channel=channel).order_by('-post_priority')
+        return render(request, 'post_list.html', locals())
+
+
+def view_post(request, post_id):
+    if request.method == 'GET':
+        post = Post.objects.get(post_id=post_id)
+        comment_list = Comment.objects.filter(post=post).order_by('-created_at')
+        comment_form = forms.CommentForm()
+        return render(request, 'post_view.html', locals())
+
+
+def delete_post(request, post_id, channel_id, channel_name):
+    if request.method == 'GET':
+        post = Post.objects.get(post_id=post_id)
+        post.delete()
+        return redirect('/')
+
+
+def edit_post(request, post_id):
+    if request.method == 'GET':
+        post = Post.objects.get(post_id=post_id)
+        post_form = forms.PostForm()
+        return render(request, "edit_post_form.html", locals())
+
+
+def create_post(request, channel_id):
+    if request.method == 'POST':
+
+        channel_id = request.POST['channel_id']
+        post_form = forms.PostForm(request.POST)
+
+        if post_form.is_valid():
+            title = post_form.cleaned_data['post_title']
+            content = post_form.cleaned_data['post_content']
+            channel = Channel.objects.get(channel_id=channel_id)
+            post = Post.objects.create(post_title=title,
+                                       created_by=request.user,
+                                       post_content=content,
+                                       channel=channel)
+
+            textmassage = 'saved'
+            return redirect('/')
+        else:
+            textmassage = 'can not saved'
+
+    if request.method == 'GET':
+        channel_id = channel_id
+        post_form = forms.PostForm()
+        return render(request, "create_post_form.html", locals())
+
+
+def create_comment(request):
+    if request.method == 'POST':
+        post_id = request.POST['post_id']
+        comment_form = forms.CommentForm(request.POST)
+
+        if comment_form.is_valid():
+            comment = comment_form.cleaned_data['comment']
+            post = Post.objects.get(pk=post_id)
+            Comment.objects.create(created_by=request.user,
+                                   post=post,
+                                   comment=comment)
+            textmessage = 'saved'
+            return redirect('/post/'+post_id+'/')
+        else:
+            textmessage = 'can not saved'
Index: app/tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/tests.py b/app/tests.py
new file mode 100755
--- /dev/null	(date 1620140678000)
+++ b/app/tests.py	(date 1620140678000)
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
Index: app/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/admin.py b/app/admin.py
new file mode 100755
--- /dev/null	(date 1620309018000)
+++ b/app/admin.py	(date 1620309018000)
@@ -0,0 +1,8 @@
+from django.contrib import admin
+
+# Register your models here.
+from app import models
+
+admin.site.register(models.Channel)
+admin.site.register(models.Post)
+admin.site.register(models.Comment)
\ No newline at end of file
Index: app/forms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/forms.py b/app/forms.py
new file mode 100755
--- /dev/null	(date 1620310224000)
+++ b/app/forms.py	(date 1620310224000)
@@ -0,0 +1,15 @@
+from django import forms
+
+
+class ChannelForm(forms.Form):
+    channel_name = forms.CharField(max_length=30)
+    created_by = forms.CharField(max_length=30)
+
+
+class PostForm(forms.Form):
+    post_title = forms.CharField(max_length=30)
+    post_content = forms.CharField(max_length=1000)
+
+
+class CommentForm(forms.Form):
+    comment = forms.CharField(max_length=500)
Index: app/apps.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/apps.py b/app/apps.py
new file mode 100755
--- /dev/null	(date 1620140678000)
+++ b/app/apps.py	(date 1620140678000)
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class AppConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'app'
Index: app/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/models.py b/app/models.py
new file mode 100755
--- /dev/null	(date 1620311334000)
+++ b/app/models.py	(date 1620311334000)
@@ -0,0 +1,68 @@
+import uuid
+
+from django.contrib.auth.models import Group, User
+from django.db import models
+
+
+class Channel(models.Model):
+    status = {
+        (0, 'Inactive'),
+        (1, 'Active')
+    }
+    channel_id = models.UUIDField(primary_key=True, auto_created=True, default=uuid.uuid4, editable=False)
+    created_by = models.ForeignKey(User, on_delete=models.CASCADE)
+
+    channel_name = models.CharField(max_length=30, unique=True)
+    channel_priority = models.IntegerField(default=50)
+
+    status = models.SmallIntegerField(choices=status, default=1)
+    created_at = models.DateTimeField(auto_now_add=True)
+    modified_at = models.DateTimeField(auto_now=True)
+
+    def __str__(self):
+        return self.channel_name
+
+
+class ChannelAdminGroup(models.Model):
+    channel = models.ForeignKey(Channel, on_delete=models.CASCADE)
+    admin_group = models.ForeignKey(Group, on_delete=models.CASCADE)
+
+
+class Post(models.Model):
+    status = {
+        (0, 'Inactive'),
+        (1, 'Active')
+    }
+    post_id = models.UUIDField(primary_key=True, auto_created=True, default=uuid.uuid4, editable=False)
+    channel = models.ForeignKey(Channel, on_delete=models.CASCADE)
+    created_by = models.ForeignKey(User, on_delete=models.CASCADE)
+
+    post_title = models.CharField(max_length=30)
+    post_priority = models.IntegerField(default=50)
+    post_content = models.TextField()
+
+    status = models.SmallIntegerField(choices=status, default=1)
+    created_at = models.DateTimeField(auto_now_add=True)
+    modified_at = models.DateTimeField(auto_now=True)
+
+    def __str__(self):
+        return self.post_title
+
+
+class Comment(models.Model):
+    status = {
+        (0, 'Inactive'),
+        (1, 'Active')
+    }
+    comment_id = models.UUIDField(primary_key=True, auto_created=True, default=uuid.uuid4, editable=False)
+
+    post = models.ForeignKey(Post, on_delete=models.CASCADE)
+    created_by = models.ForeignKey(User, on_delete=models.CASCADE)
+    comment = models.TextField()
+
+    status = models.SmallIntegerField(choices=status, default=1)
+    created_at = models.DateTimeField(auto_now_add=True)
+    modified_at = models.DateTimeField(auto_now=True)
+
+    def __str__(self):
+        return self.comment
Index: templates/create_channel_form.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/create_channel_form.html b/templates/create_channel_form.html
new file mode 100755
--- /dev/null	(date 1620223408000)
+++ b/templates/create_channel_form.html	(date 1620223408000)
@@ -0,0 +1,16 @@
+{% load widget_tweaks %}
+<form action="" method="POST">
+    {% csrf_token %}
+    <h1>channel</h1>
+    <label> channel name:
+        {{ channel_form.channel_name }}
+    </label>
+    <br>
+    <label> author:
+        {{ channel_form.created_by }}
+    </label>
+    <br>
+    <h3>{{ textmassage }}</h3>
+    <button type="submit" class="btn btn-info"> CREATE</button>
+    <button type="reset" class="btn btn-info"> RESET</button>
+</form>
Index: templates/topbar.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/topbar.html b/templates/topbar.html
new file mode 100644
--- /dev/null	(date 1620388537032)
+++ b/templates/topbar.html	(date 1620388537032)
@@ -0,0 +1,21 @@
+{% load static %}
+<link rel="stylesheet" type="text/css" href="{% static 'style.css' %}">
+<div class="bar">
+    <img src="{% static 'images/search_icon.png' %}" id="search" onclick="searchOnClick()"/>
+    <input type="search" value="search" result="5" id="searchbar">
+    <div id="imgButtonDiv">
+        <div id="loginDiv">
+            <div id="loginbtnDiv">
+                <img src="{% static 'images/login_button.png' %}" id="login" onclick="loginOnClick()"/>
+            </div>
+            <div id="loginbox">
+                <span>username: </span>
+                <input type="text" name="username"><br/>
+                <span>password: </span>
+                <input type="password" name="password">
+            </div>
+        </div>
+        <img src="{% static 'images/signup_button.png' %}" id="signup" onclick="signupOnClick()"/>
+    </div>
+</div>
+
Index: templates/edit_post_form.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/edit_post_form.html b/templates/edit_post_form.html
new file mode 100755
--- /dev/null	(date 1620312524000)
+++ b/templates/edit_post_form.html	(date 1620312524000)
@@ -0,0 +1,18 @@
+{% load widget_tweaks %}
+
+<form action="" method="POST">
+    {% csrf_token %}
+    <input type="hidden" name="channel_id" value="{{ channel_id }}">
+    <h1>post</h1>
+    <label> post name:
+        {{ post_form.post_title }}
+    </label>
+    <br>
+    <label> post content:
+        {{ post_form.post_content }}
+    </label>
+    <br>
+    <h3>{{ textmassage }}</h3>
+    <button type="submit" class="btn btn-info"> CREATE</button>
+    <button type="reset" class="btn btn-info"> RESET</button>
+</form>
Index: templates/create_comment_form.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/create_comment_form.html b/templates/create_comment_form.html
new file mode 100755
--- /dev/null	(date 1620311058000)
+++ b/templates/create_comment_form.html	(date 1620311058000)
@@ -0,0 +1,14 @@
+{% load widget_tweaks %}
+
+<form action="/comment/create/" method="POST">
+    {% csrf_token %}
+    <input type="hidden" name="post_id" value="{{ post_id }}">
+    <h1>Comment</h1>
+    <label> Comment:
+        {{ comment_form.comment }}
+    </label>
+    <br>
+    <h3>{{ textmassage }}</h3>
+    <button type="submit" class="btn btn-info"> CREATE</button>
+    <button type="reset" class="btn btn-info"> RESET</button>
+</form>
Index: templates/post_view.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/post_view.html b/templates/post_view.html
new file mode 100755
--- /dev/null	(date 1620312322000)
+++ b/templates/post_view.html	(date 1620312322000)
@@ -0,0 +1,25 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <title>Title</title>
+</head>
+<body>
+{{ post.post_title }}
+  <a href='/post/delete/{{ post.post_id }}/{{ post.channel.channel_id}}/{{ post.channel.channel_name}}/'>
+                Delete
+            </a>
+
+<a href='/post/edit/{{ post.post_id }}/{{ post.channel.channel_id}}/{{ post.channel.channel_name}}/'>
+                Edit
+            </a>
+<br>
+
+{% for comment in comment_list %}
+    {{ comment.created_by.username }} <br>
+   {{ comment.comment }}
+{% endfor %}
+
+{%include 'create_comment_form.html'%}
+</body>
+</html>
\ No newline at end of file
Index: .idea/Forum.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"FacetManager\">\n    <facet type=\"django\" name=\"Django\">\n      <configuration>\n        <option name=\"rootFolder\" value=\"$MODULE_DIR$\" />\n        <option name=\"settingsModule\" value=\"Forum/settings.py\" />\n        <option name=\"manageScript\" value=\"$MODULE_DIR$/manage.py\" />\n        <option name=\"environment\" value=\"&lt;map/&gt;\" />\n        <option name=\"doNotUseTestRunner\" value=\"false\" />\n        <option name=\"trackFilePattern\" value=\"migrations\" />\n      </configuration>\n    </facet>\n  </component>\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\" />\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n  <component name=\"TemplatesService\">\n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Django\" />\n    <option name=\"TEMPLATE_FOLDERS\">\n      <list>\n        <option value=\"$MODULE_DIR$/templates\" />\n      </list>\n    </option>\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Forum.iml b/.idea/Forum.iml
--- a/.idea/Forum.iml	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
+++ b/.idea/Forum.iml	(date 1620390042638)
@@ -4,7 +4,7 @@
     <facet type="django" name="Django">
       <configuration>
         <option name="rootFolder" value="$MODULE_DIR$" />
-        <option name="settingsModule" value="Forum/settings.py" />
+        <option name="settingsModule" value="forum/settings.py" />
         <option name="manageScript" value="$MODULE_DIR$/manage.py" />
         <option name="environment" value="&lt;map/&gt;" />
         <option name="doNotUseTestRunner" value="false" />
@@ -14,7 +14,7 @@
   </component>
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="inheritedJdk" />
+    <orderEntry type="jdk" jdkName="Python 3.8 (djangoenv)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="TemplatesService">
Index: templates/post_list.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/post_list.html b/templates/post_list.html
new file mode 100755
--- /dev/null	(date 1620311770000)
+++ b/templates/post_list.html	(date 1620311770000)
@@ -0,0 +1,26 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <title> post</title>
+</head>
+<body>
+<div>
+    {{ channel.channel_id }}
+</div>
+{% for post in post_list %}
+    <ol>
+        <ul>
+            <a href='/post/{{ post.post_id }}/'>
+                {{ post.post_title }}
+            </a>
+
+
+        </ul>
+    </ol>
+{% endfor %}
+
+<div><a href="/createPost/{{ channel.channel_id }}/">Create Post</a></div>
+
+</body>
+</html>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.8 (djangoenv)\" project-jdk-type=\"Python SDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 299c0b9cf706dc5de929bbeeec7038b5045682b5)
+++ b/.idea/misc.xml	(date 1620314870707)
@@ -1,4 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (djangoenv)" project-jdk-type="Python SDK" />
+  <component name="PyCharmProfessionalAdvertiser">
+    <option name="shown" value="true" />
+  </component>
 </project>
\ No newline at end of file
diff --git a/loginapp/migrations/__init__.py b/loginapp/migrations/__init__.py
deleted file mode 100644
diff --git a/loginapp/__init__.py b/loginapp/__init__.py
deleted file mode 100644
diff --git a/app/migrations/__init__.py b/app/migrations/__init__.py
new file mode 100755
diff --git a/app/__init__.py b/app/__init__.py
new file mode 100755
